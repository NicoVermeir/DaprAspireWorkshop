@page "/albums"
@page "/albums/{AlbumId:guid}"
@rendermode InteractiveServer
@inject IMusicDataService MusicDataService
@inject IAudioPlayerService AudioPlayerService
@inject ILogger<Albums> Logger

<div class="container-fluid py-4">
    @if (AlbumId.HasValue)
    {
        <!-- Album Detail View -->
        @if (currentAlbum != null)
        {
            <div class="row mb-4">
                <div class="col-md-4">
                    <img src="@currentAlbum.CoverImageUrl" alt="@currentAlbum.Title" class="img-fluid rounded shadow" />
                </div>
                <div class="col-md-8">
                    <h1 class="display-4 text-light mb-3">@currentAlbum.Title</h1>
                    <p class="text-muted lead">
                        <a href="/artists/@currentAlbum.ArtistId" class="text-decoration-none text-muted">
                            @currentAlbum.ArtistName
                        </a>
                    </p>
                    <p class="text-light">@currentAlbum.ReleaseYear • @albumSongs.Count songs • @GetTotalDuration()</p>
                    <div class="d-flex gap-2">
                        <button class="btn btn-danger" @onclick="PlayAlbum">
                            <i class="fas fa-play"></i> Play Album
                        </button>
                        <button class="btn btn-outline-light" @onclick="ShuffleAlbum">
                            <i class="fas fa-random"></i> Shuffle
                        </button>
                    </div>
                </div>
            </div>

            <!-- Album Tracks -->
            <div class="row">
                <div class="col-12">
                    <h3 class="text-light mb-3">Tracks</h3>
                    <div class="table-responsive">
                        <table class="table table-dark table-hover">
                            <thead>
                                <tr>
                                    <th width="5%">#</th>
                                    <th>Title</th>
                                    <th>Duration</th>
                                    <th width="10%">Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @for (int i = 0; i < albumSongs.Count; i++)
                                {
                                    var song = albumSongs[i];
                                    var index = i;
                                    <tr>
                                        <td>@(index + 1)</td>
                                        <td>
                                            <div class="d-flex align-items-center">
                                                <div>
                                                    <div class="fw-bold">@song.Title</div>
                                                    <div class="text-muted small">@song.ArtistName</div>
                                                </div>
                                            </div>
                                        </td>
                                        <td>@song.Duration.ToString(@"mm\:ss")</td>
                                        <td>
                                            <button class="btn btn-sm btn-outline-danger" @onclick="() => PlaySong(song)">
                                                <i class="fas fa-play"></i>
                                            </button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

            <!-- More by Artist -->
            <div class="row mt-5">
                <div class="col-12">
                    <h3 class="text-light mb-3">More by @currentAlbum.ArtistName</h3>
                    <div class="row">
                        @foreach (var album in relatedAlbums.Take(4))
                        {
                            <div class="col-md-3 col-sm-6 mb-4">
                                <div class="card bg-dark text-light h-100 hover-scale">
                                    <img src="@album.CoverImageUrl" class="card-img-top" alt="@album.Title" />
                                    <div class="card-body">
                                        <h5 class="card-title">@album.Title</h5>
                                        <p class="card-text text-muted">@album.ReleaseYear</p>
                                        <button class="btn btn-sm btn-outline-danger" @onclick="() => PlayAlbumSongs(album)">
                                            <i class="fas fa-play"></i> Play
                                        </button>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        }
        else
        {
            <div class="text-center py-5">
                <div class="spinner-border text-danger" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p class="text-muted mt-3">Loading album...</p>
            </div>
        }
    }
    else
    {
        <!-- Albums List View -->
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h1 class="text-light">Albums</h1>
            <div class="btn-group" role="group">
                <button class="btn btn-outline-light" @onclick='() => sortBy = "title"' disabled="@(sortBy == "title")">
                    Title
                </button>
                <button class="btn btn-outline-light" @onclick='() => sortBy = "artist"' disabled="@(sortBy == "artist")">
                    Artist
                </button>
                <button class="btn btn-outline-light" @onclick='() => sortBy = "year"' disabled="@(sortBy == "year")">
                    Year
                </button>
            </div>
        </div>

        <div class="row">
            @foreach (var album in GetSortedAlbums())
            {
                <div class="col-md-3 col-sm-6 mb-4">
                    <div class="card bg-dark text-light h-100 hover-scale">
                        <img src="@album.CoverImageUrl" class="card-img-top" alt="@album.Title" style="height: 300px; object-fit: cover;" />
                        <div class="card-body">
                            <h5 class="card-title">@album.Title</h5>
                            <p class="card-text text-muted">
                                <a href="/artists/@album.ArtistId" class="text-decoration-none text-muted">
                                    @album.ArtistName
                                </a>
                            </p>
                            <p class="card-text text-muted small">@album.ReleaseYear</p>
                            <div class="d-flex gap-2">
                                <a href="/albums/@album.Id" class="btn btn-sm btn-danger">
                                    <i class="fas fa-info-circle"></i> Details
                                </a>
                                <button class="btn btn-sm btn-outline-danger" @onclick="() => PlayAlbumSongs(album)">
                                    <i class="fas fa-play"></i> Play
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

@code {
    [Parameter] public Guid? AlbumId { get; set; }

    private List<Album> allAlbums = new();
    private Album? currentAlbum;
    private List<Song> albumSongs = new();
    private List<Album> relatedAlbums = new();
    private string sortBy = "title";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            allAlbums = (await MusicDataService.GetAlbumsAsync()).ToList();
            
            if (AlbumId.HasValue)
            {
                await LoadAlbumDetails();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading albums");
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (AlbumId.HasValue)
        {
            await LoadAlbumDetails();
        }
    }

    private async Task LoadAlbumDetails()
    {
        if (!AlbumId.HasValue) return;

        currentAlbum = allAlbums.FirstOrDefault(a => a.Id == AlbumId.Value);
        
        if (currentAlbum != null)
        {
            var allSongs = await MusicDataService.GetSongsAsync();
            albumSongs = allSongs.Where(s => s.AlbumId == currentAlbum.Id).ToList();
            
            relatedAlbums = allAlbums
                .Where(a => a.ArtistId == currentAlbum.ArtistId && a.Id != currentAlbum.Id)
                .ToList();
        }
    }

    private IEnumerable<Album> GetSortedAlbums()
    {
        return sortBy switch
        {
            "artist" => allAlbums.OrderBy(a => a.ArtistName).ThenBy(a => a.Title),
            "year" => allAlbums.OrderByDescending(a => a.ReleaseYear).ThenBy(a => a.Title),
            _ => allAlbums.OrderBy(a => a.Title)
        };
    }

    private string GetTotalDuration()
    {
        var total = albumSongs.Aggregate(TimeSpan.Zero, (sum, song) => sum.Add(song.Duration));
        return total.TotalMinutes >= 60 
            ? $"{(int)total.TotalHours}h {total.Minutes}m"
            : $"{(int)total.TotalMinutes}m";
    }

    private async Task PlayAlbum()
    {
        if (albumSongs.Any())
        {
            await AudioPlayerService.PlayAsync(albumSongs);
        }
    }

    private async Task ShuffleAlbum()
    {
        if (albumSongs.Any())
        {
            var shuffled = albumSongs.OrderBy(x => Guid.NewGuid()).ToList();
            await AudioPlayerService.PlayAsync(shuffled);
        }
    }

    private async Task PlayAlbumSongs(Album album)
    {
        var allSongs = await MusicDataService.GetSongsAsync();
        var songs = allSongs.Where(s => s.AlbumId == album.Id).ToList();
        await AudioPlayerService.PlayAsync(songs);
    }

    private async Task PlaySong(Song song)
    {
        await AudioPlayerService.PlayAsync(song);
    }
}
