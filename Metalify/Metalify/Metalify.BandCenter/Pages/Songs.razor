@page "/songs"
@using Metalify.BandCenter.Models
@using Metalify.BandCenter.Models.DTOs
@using Metalify.BandCenter.Services
@inject IBandCenterService BandCenterService
@inject IBandSessionService BandSessionService
@inject NavigationManager Navigation

<PageTitle>Songs - Metalify BandCenter</PageTitle>

@if (currentBand == null)
{
    <div class="text-center">
        <div class="spinner-border text-danger" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p class="mt-2">Loading...</p>
    </div>
}
else
{
    <div class="container-fluid">
        <div class="row mb-4">
            <div class="col">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <h1>
                            <i class="fas fa-music me-2 text-danger"></i>
                            Songs
                        </h1>
                        <p class="text-muted">Manage @currentBand.Name's tracks</p>
                    </div>
                    <div>
                        <button class="btn btn-danger" @onclick="ShowCreateModal">
                            <i class="fas fa-plus me-2"></i>
                            Add Song
                        </button>
                    </div>
                </div>
            </div>
        </div>

        @if (!string.IsNullOrEmpty(successMessage))
        {
            <div class="alert alert-success alert-dismissible fade show" role="alert">
                <i class="fas fa-check-circle me-2"></i>
                @successMessage
                <button type="button" class="btn-close" @onclick="() => successMessage = string.Empty"></button>
            </div>
        }

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                <i class="fas fa-exclamation-triangle me-2"></i>
                @errorMessage
                <button type="button" class="btn-close" @onclick="() => errorMessage = string.Empty"></button>
            </div>
        }

        <!-- Albums filter -->
        @if (albums != null && albums.Any())
        {
            <div class="row mb-3">
                <div class="col-md-6">
                    <label class="form-label">Filter by Album:</label>
                    <select class="form-select" @onchange="OnAlbumFilterChanged">
                        <option value="">All Albums</option>
                        @foreach (var album in albums)
                        {
                            <option value="@album.Id">@album.Title</option>
                        }
                    </select>
                </div>
            </div>
        }

        @if (isLoading)
        {
            <div class="text-center py-5">
                <div class="spinner-border text-danger" role="status">
                    <span class="visually-hidden">Loading songs...</span>
                </div>
                <p class="mt-2 text-muted">Loading songs...</p>
            </div>
        }
        else if (songs == null || !songs.Any())
        {
            <div class="text-center py-5">
                <i class="fas fa-music fa-5x text-muted mb-3"></i>
                <h4 class="text-muted">No Songs Yet</h4>
                <p class="text-muted">
                    @if (selectedAlbumId.HasValue)
                    {
                        @("No songs found in the selected album. Add some tracks to get started!")
                    }
                    else
                    {
                        @("Start building your catalog by adding your first song.")
                    }
                </p>
                <button class="btn btn-danger" @onclick="ShowCreateModal">
                    <i class="fas fa-plus me-2"></i>
                    Add Your First Song
                </button>
            </div>
        }
        else
        {
            <div class="row">
                <div class="col">
                    <div class="card">
                        <div class="card-body">
                            <div class="table-responsive">
                                <table class="table table-dark table-striped">
                                    <thead>
                                        <tr>
                                            <th>Track #</th>
                                            <th>Title</th>
                                            <th>Album</th>
                                            <th>Duration</th>
                                            <th>Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var song in songs.OrderBy(s => s.TrackNumber))
                                        {
                                            <tr>
                                                <td>@song.TrackNumber</td>
                                                <td>@song.Title</td>
                                                <td>@(song.AlbumTitle ?? "No Album")</td>
                                                <td>@song.Duration.ToString(@"mm\:ss")</td>
                                                <td>
                                                    <button class="btn btn-outline-danger btn-sm me-2" @onclick="() => ShowEditModal(song)">
                                                        <i class="fas fa-edit me-1"></i>
                                                        Edit
                                                    </button>
                                                    <button class="btn btn-outline-light btn-sm" @onclick="() => ShowDeleteConfirmation(song)">
                                                        <i class="fas fa-trash me-1"></i>
                                                        Delete
                                                    </button>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>

    <!-- Create/Edit Song Modal -->
    @if (showModal)
    {
        <div class="modal fade show" tabindex="-1" style="display: block;" @onclick="CloseModal">
            <div class="modal-dialog" @onclick:stopPropagation="true">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">
                            <i class="fas fa-music me-2"></i>
                            @(isEditing ? "Edit Song" : "Add New Song")
                        </h5>
                        <button type="button" class="btn-close" @onclick="CloseModal"></button>
                    </div>
                    <EditForm Model="songModel" OnValidSubmit="HandleSaveSong">
                        <DataAnnotationsValidator />
                        <div class="modal-body">
                            <div class="mb-3">
                                <label for="songTitle" class="form-label">Song Title</label>
                                <InputText id="songTitle" class="form-control" @bind-Value="songModel.Title" />
                                <ValidationMessage For="@(() => songModel.Title)" />
                            </div>
                            @if (albums != null && albums.Any())
                            {
                                <div class="mb-3">
                                    <label for="albumId" class="form-label">Album</label>
                                    <InputSelect id="albumId" class="form-select" @bind-Value="songModel.AlbumId">
                                        <option value="">Select an album</option>
                                        @foreach (var album in albums)
                                        {
                                            <option value="@album.Id">@album.Title</option>
                                        }
                                    </InputSelect>
                                    <ValidationMessage For="@(() => songModel.AlbumId)" />
                                </div>
                            }
                            <div class="row">
                                <div class="col-md-6 mb-3">
                                    <label for="trackNumber" class="form-label">Track Number</label>
                                    <InputNumber id="trackNumber" class="form-control" @bind-Value="songModel.TrackNumber" />
                                    <ValidationMessage For="@(() => songModel.TrackNumber)" />
                                </div>
                                <div class="col-md-6 mb-3">
                                    <label for="durationMinutes" class="form-label">Duration</label>
                                    <div class="input-group">
                                        <InputNumber id="durationMinutes" class="form-control" @bind-Value="durationMinutes" placeholder="Minutes" />
                                        <span class="input-group-text">:</span>
                                        <InputNumber id="durationSeconds" class="form-control" @bind-Value="durationSeconds" placeholder="Seconds" />
                                    </div>
                                    <small class="text-muted">Enter duration in minutes and seconds</small>
                                </div>
                            </div>
                            <div class="mb-3">
                                <label for="lyrics" class="form-label">Lyrics (Optional)</label>
                                <InputTextArea id="lyrics" class="form-control" rows="4" @bind-Value="songModel.Lyrics" 
                                             placeholder="Enter song lyrics..." />
                            </div>
                            <div class="mb-3">
                                <label for="notes" class="form-label">Notes (Optional)</label>
                                <InputTextArea id="notes" class="form-control" rows="2" @bind-Value="songModel.Notes" 
                                             placeholder="Any additional notes about this song..." />
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-outline-light" @onclick="CloseModal">Cancel</button>
                            <button type="submit" class="btn btn-danger" disabled="@isSaving">
                                @if (isSaving)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                }
                                else
                                {
                                    <i class="fas fa-save me-2"></i>
                                }
                                @(isEditing ? "Update" : "Create") Song
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
        <div class="modal-backdrop fade show"></div>
    }

    <!-- Delete Confirmation Modal -->
    @if (showDeleteModal && songToDelete != null)
    {
        <div class="modal fade show" tabindex="-1" style="display: block;">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">
                            <i class="fas fa-exclamation-triangle text-danger me-2"></i>
                            Confirm Delete
                        </h5>
                        <button type="button" class="btn-close" @onclick="CloseDeleteModal"></button>
                    </div>
                    <div class="modal-body">
                        <p>Are you sure you want to delete the song <strong>"@songToDelete.Title"</strong>?</p>
                        <p class="text-muted mb-0">This action cannot be undone.</p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-outline-light" @onclick="CloseDeleteModal">Cancel</button>
                        <button type="button" class="btn btn-danger" @onclick="HandleDeleteSong" disabled="@isDeleting">
                            @if (isDeleting)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                            }
                            else
                            {
                                <i class="fas fa-trash me-2"></i>
                            }
                            Delete Song
                        </button>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-backdrop fade show"></div>
    }
}

@code {
    private Band? currentBand;
    private List<AlbumSummaryDto>? albums;
    private List<SongDto>? songs;
    private bool isLoading = true;
    private string successMessage = string.Empty;
    private string errorMessage = string.Empty;
    private Guid? selectedAlbumId;

    // Modal state
    private bool showModal = false;
    private bool showDeleteModal = false;
    private bool isEditing = false;
    private bool isSaving = false;
    private bool isDeleting = false;
    private SongDto? songToDelete;
    private SongEditModel songModel = new();
    private int durationMinutes = 0;
    private int durationSeconds = 0;

    protected override async Task OnInitializedAsync()
    {
        currentBand = await BandSessionService.GetCurrentBandAsync();

        if (currentBand == null)
        {
            Navigation.NavigateTo("/login");
            return;
        }

        await LoadAlbums();
        await LoadSongs();
    }

    private async Task LoadAlbums()
    {
        if (currentBand == null) return;

        try
        {
            albums = await BandCenterService.GetBandAlbumsAsync(currentBand.Id);
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load albums: {ex.Message}";
        }
    }

    private async Task LoadSongs()
    {
        if (currentBand == null) return;

        try
        {
            isLoading = true;

            if (selectedAlbumId.HasValue)
            {
                var album = await BandCenterService.GetAlbumSongsAsync(selectedAlbumId.Value);
                songs = album.Songs;
            }
            else
            {
                // For now, we'll just show an empty list when no album is selected
                // In a real implementation, we'd have a GetBandSongsAsync method
                songs = new List<SongDto>();
                
                // Load songs from all albums
                if (albums != null)
                {
                    var allSongs = new List<SongDto>();
                    foreach (var album in albums)
                    {
                        try
                        {
                            var albumDetails = await BandCenterService.GetAlbumSongsAsync(album.Id);
                            allSongs.AddRange(albumDetails.Songs);
                        }
                        catch
                        {
                            // Ignore errors for individual albums
                        }
                    }
                    songs = allSongs;
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load songs: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task OnAlbumFilterChanged(ChangeEventArgs e)
    {
        var value = e.Value?.ToString();
        selectedAlbumId = string.IsNullOrEmpty(value) ? null : Guid.Parse(value);
        await LoadSongs();
    }

    private void ShowCreateModal()
    {
        songModel = new SongEditModel();
        durationMinutes = 0;
        durationSeconds = 0;
        isEditing = false;
        showModal = true;
    }

    private void ShowEditModal(SongDto song)
    {
        songModel = new SongEditModel
        {
            Title = song.Title,
            AlbumId = song.AlbumId.ToString(),
            TrackNumber = song.TrackNumber,
            Lyrics = song.Lyrics,
            Notes = song.Notes
        };
        
        durationMinutes = (int)song.Duration.TotalMinutes;
        durationSeconds = song.Duration.Seconds;
        isEditing = true;
        showModal = true;
    }

    private void CloseModal()
    {
        showModal = false;
        songModel = new SongEditModel();
        isEditing = false;
    }

    private async Task HandleSaveSong()
    {
        if (currentBand == null) return;

        try
        {
            isSaving = true;
            errorMessage = string.Empty;
            successMessage = string.Empty;

            // Calculate total duration
            var totalDuration = TimeSpan.FromMinutes(durationMinutes) + TimeSpan.FromSeconds(durationSeconds);

            if (isEditing)
            {
                // For now, we'll just create a new song since we don't have update functionality
                // In a real implementation, we'd update the existing song
                var createDto = new CreateSongDto
                {
                    Title = songModel.Title,
                    TrackNumber = songModel.TrackNumber,
                    Duration = totalDuration,
                    Lyrics = songModel.Lyrics ?? string.Empty,
                    Notes = songModel.Notes ?? string.Empty,
                    AlbumId = string.IsNullOrEmpty(songModel.AlbumId) ? Guid.Empty : Guid.Parse(songModel.AlbumId),
                    BandId = currentBand.Id
                };
                
                await BandCenterService.CreateSongAsync(createDto);
                successMessage = "Song updated successfully!";
            }
            else
            {
                var createDto = new CreateSongDto
                {
                    Title = songModel.Title,
                    TrackNumber = songModel.TrackNumber,
                    Duration = totalDuration,
                    Lyrics = songModel.Lyrics ?? string.Empty,
                    Notes = songModel.Notes ?? string.Empty,
                    AlbumId = string.IsNullOrEmpty(songModel.AlbumId) ? Guid.Empty : Guid.Parse(songModel.AlbumId),
                    BandId = currentBand.Id
                };
                
                await BandCenterService.CreateSongAsync(createDto);
                successMessage = "Song created successfully!";
            }

            CloseModal();
            await LoadSongs();
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to save song: {ex.Message}";
        }
        finally
        {
            isSaving = false;
        }
    }

    private void ShowDeleteConfirmation(SongDto song)
    {
        songToDelete = song;
        showDeleteModal = true;
    }

    private void CloseDeleteModal()
    {
        showDeleteModal = false;
        songToDelete = null;
    }

    private async Task HandleDeleteSong()
    {
        if (songToDelete == null || currentBand == null) return;

        try
        {
            isDeleting = true;
            errorMessage = string.Empty;
            successMessage = string.Empty;

            await BandCenterService.DeleteSongAsync(songToDelete.Id);
            successMessage = $"Song \"{songToDelete.Title}\" deleted successfully!";
            
            CloseDeleteModal();
            await LoadSongs();
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to delete song: {ex.Message}";
        }
        finally
        {
            isDeleting = false;
        }
    }

    private class SongEditModel
    {
        [System.ComponentModel.DataAnnotations.Required(ErrorMessage = "Song title is required")]
        public string Title { get; set; } = string.Empty;
        
        public string AlbumId { get; set; } = string.Empty;
        
        [System.ComponentModel.DataAnnotations.Range(1, 999, ErrorMessage = "Track number must be between 1 and 999")]
        public int TrackNumber { get; set; } = 1;
        
        public string? Lyrics { get; set; }
        
        public string? Notes { get; set; }
    }
}
