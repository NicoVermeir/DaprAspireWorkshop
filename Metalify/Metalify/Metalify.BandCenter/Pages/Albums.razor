@page "/albums"
@using Metalify.BandCenter.Models
@using Metalify.BandCenter.Models.DTOs
@using Metalify.BandCenter.Services
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations
@inject IBandCenterService BandCenterService
@inject IBandSessionService BandSessionService
@inject NavigationManager Navigation

<PageTitle>Albums - Metalify BandCenter</PageTitle>

@if (currentBand == null)
{
    <div class="text-center">
        <div class="spinner-border text-danger" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p class="mt-2">Loading...</p>
    </div>
}
else
{
    <div class="container-fluid">
        <div class="row mb-4">
            <div class="col">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <h1>
                            <i class="fas fa-compact-disc me-2 text-danger"></i>
                            Albums
                        </h1>
                        <p class="text-muted">Manage @currentBand.Name's discography</p>
                    </div>
                    <div>
                        <button class="btn btn-danger" @onclick="ShowCreateModal">
                            <i class="fas fa-plus me-2"></i>
                            Add Album
                        </button>
                    </div>
                </div>
            </div>
        </div>

        @if (!string.IsNullOrEmpty(successMessage))
        {
            <div class="alert alert-success alert-dismissible fade show" role="alert">
                <i class="fas fa-check-circle me-2"></i>
                @successMessage
                <button type="button" class="btn-close" @onclick="() => successMessage = string.Empty"></button>
            </div>
        }

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                <i class="fas fa-exclamation-triangle me-2"></i>
                @errorMessage
                <button type="button" class="btn-close" @onclick="() => errorMessage = string.Empty"></button>
            </div>
        }

        @if (isLoading)
        {
            <div class="text-center py-5">
                <div class="spinner-border text-danger" role="status">
                    <span class="visually-hidden">Loading albums...</span>
                </div>
                <p class="mt-2 text-muted">Loading albums...</p>
            </div>
        }
        else if (albums == null || !albums.Any())
        {
            <div class="text-center py-5">
                <i class="fas fa-compact-disc fa-5x text-muted mb-3"></i>
                <h4 class="text-muted">No Albums Yet</h4>
                <p class="text-muted">Start building your discography by adding your first album.</p>
                <button class="btn btn-danger" @onclick="ShowCreateModal">
                    <i class="fas fa-plus me-2"></i>
                    Add Your First Album
                </button>
            </div>
        }
        else
        {
            <div class="row">
                @foreach (var album in albums)
                {
                    <div class="col-md-6 col-lg-4 mb-4">
                        <div class="card h-100">
                            <div class="card-body">
                                <h5 class="card-title">@album.Title</h5>
                                <p class="card-text text-muted">
                                    <i class="fas fa-calendar me-1"></i>
                                    @(album.ReleaseYear?.ToString() ?? "Unknown")
                                </p>
                                @if (!string.IsNullOrEmpty(album.Description))
                                {
                                    <p class="card-text">@album.Description</p>
                                }
                            </div>
                            <div class="card-footer bg-transparent">
                                <div class="d-flex justify-content-between">
                                    <button class="btn btn-outline-danger btn-sm" @onclick="() => ShowEditModal(album)">
                                        <i class="fas fa-edit me-1"></i>
                                        Edit
                                    </button>
                                    <button class="btn btn-outline-light btn-sm" @onclick="() => ShowDeleteConfirmation(album)">
                                        <i class="fas fa-trash me-1"></i>
                                        Delete
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
    </div>

    <!-- Create/Edit Album Modal -->
    @if (showModal)
    {
        <div class="modal fade show" tabindex="-1" style="display: block;" @onclick="CloseModal">
            <div class="modal-dialog" @onclick:stopPropagation="true">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">
                            <i class="fas fa-compact-disc me-2"></i>
                            @(isEditing ? "Edit Album" : "Add New Album")
                        </h5>
                        <button type="button" class="btn-close" @onclick="CloseModal"></button>
                    </div>
                    <EditForm Model="albumModel" OnValidSubmit="HandleSaveAlbum">
                        <DataAnnotationsValidator />
                        <div class="modal-body">
                            <div class="mb-3">
                                <label for="albumTitle" class="form-label">Album Title</label>
                                <InputText id="albumTitle" class="form-control" @bind-Value="albumModel.Title" />
                                <ValidationMessage For="@(() => albumModel.Title)" />
                            </div>
                            <div class="mb-3">
                                <label for="albumReleaseYear" class="form-label">Release Year</label>
                                <InputNumber id="albumReleaseYear" class="form-control" @bind-Value="albumModel.ReleaseYear" />
                                <ValidationMessage For="@(() => albumModel.ReleaseYear)" />
                            </div>
                            <div class="mb-3">
                                <label for="albumDescription" class="form-label">Description</label>
                                <InputTextArea id="albumDescription" class="form-control" rows="3" @bind-Value="albumModel.Description" 
                                             placeholder="Describe this album..." />
                                <ValidationMessage For="@(() => albumModel.Description)" />
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-outline-light" @onclick="CloseModal">Cancel</button>
                            <button type="submit" class="btn btn-danger" disabled="@isSaving">
                                @if (isSaving)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                }
                                else
                                {
                                    <i class="fas fa-save me-2"></i>
                                }
                                @(isEditing ? "Update" : "Create") Album
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
        <div class="modal-backdrop fade show"></div>
    }

    <!-- Delete Confirmation Modal -->
    @if (showDeleteModal && albumToDelete != null)
    {
        <div class="modal fade show" tabindex="-1" style="display: block;">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">
                            <i class="fas fa-exclamation-triangle text-danger me-2"></i>
                            Confirm Delete
                        </h5>
                        <button type="button" class="btn-close" @onclick="CloseDeleteModal"></button>
                    </div>
                    <div class="modal-body">
                        <p>Are you sure you want to delete the album <strong>"@albumToDelete.Title"</strong>?</p>
                        <p class="text-muted mb-0">This action cannot be undone.</p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-outline-light" @onclick="CloseDeleteModal">Cancel</button>
                        <button type="button" class="btn btn-danger" @onclick="HandleDeleteAlbum" disabled="@isDeleting">
                            @if (isDeleting)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                            }
                            else
                            {
                                <i class="fas fa-trash me-2"></i>
                            }
                            Delete Album
                        </button>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-backdrop fade show"></div>
    }
}

@code {
    private Band? currentBand;
    private List<Album>? albums;
    private bool isLoading = true;
    private string successMessage = string.Empty;
    private string errorMessage = string.Empty;

    // Modal state
    private bool showModal = false;
    private bool showDeleteModal = false;
    private bool isEditing = false;
    private bool isSaving = false;
    private bool isDeleting = false;
    private Album? albumToDelete;
    private AlbumCreateDto albumModel = new();

    protected override async Task OnInitializedAsync()
    {
        currentBand = await BandSessionService.GetCurrentBandAsync();
        
        if (currentBand == null)
        {
            Navigation.NavigateTo("/login");
            return;
        }

        await LoadAlbums();
    }

    private async Task LoadAlbums()
    {
        if (currentBand == null) return;        try
        {
            isLoading = true;
            var albumDtos = await BandCenterService.GetBandAlbumsAsync(currentBand.Id);
            albums = albumDtos.Select(dto => new Album
            {
                Id = dto.Id,
                Title = dto.Title,
                ReleaseYear = dto.ReleaseYear,
                // Map other properties as needed
                Description = string.Empty // Placeholder
            }).ToList();
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load albums: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ShowCreateModal()
    {
        albumModel = new AlbumCreateDto();
        isEditing = false;
        showModal = true;
    }    private void ShowEditModal(Album album)
    {
        albumModel = new AlbumCreateDto
        {
            Title = album.Title,
            ReleaseYear = album.ReleaseYear,
            Description = album.Description,
            BandId = album.BandId
        };
        isEditing = true;
        showModal = true;
    }

    private void CloseModal()
    {
        showModal = false;
        albumModel = new AlbumCreateDto();
        isEditing = false;
    }

    private async Task HandleSaveAlbum()
    {
        if (currentBand == null) return;

        try
        {
            isSaving = true;
            errorMessage = string.Empty;
            successMessage = string.Empty;            if (isEditing)
            {
                // For now, just create new album - proper editing would require storing the album being edited
                var createDto = new CreateAlbumDto
                {
                    Title = albumModel.Title,
                    ReleaseYear = albumModel.ReleaseYear ?? 0,
                    Notes = albumModel.Description ?? string.Empty,
                    BandId = currentBand.Id
                };
                await BandCenterService.CreateAlbumAsync(createDto);
                successMessage = "Album updated successfully!";
            }
            else
            {
                var createDto = new CreateAlbumDto
                {
                    Title = albumModel.Title,
                    ReleaseYear = albumModel.ReleaseYear ?? 0,
                    Notes = albumModel.Description ?? string.Empty,
                    BandId = currentBand.Id
                };
                await BandCenterService.CreateAlbumAsync(createDto);
                successMessage = "Album created successfully!";
            }

            CloseModal();
            await LoadAlbums();
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to save album: {ex.Message}";
        }
        finally
        {
            isSaving = false;
        }
    }

    private void ShowDeleteConfirmation(Album album)
    {
        albumToDelete = album;
        showDeleteModal = true;
    }

    private void CloseDeleteModal()
    {
        showDeleteModal = false;
        albumToDelete = null;
    }

    private async Task HandleDeleteAlbum()
    {
        if (albumToDelete == null || currentBand == null) return;

        try
        {
            isDeleting = true;
            errorMessage = string.Empty;
            successMessage = string.Empty;

            await BandCenterService.DeleteAlbumAsync(albumToDelete.Id);
            successMessage = $"Album \"{albumToDelete.Title}\" deleted successfully!";
            
            CloseDeleteModal();
            await LoadAlbums();
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to delete album: {ex.Message}";
        }
        finally
        {
            isDeleting = false;
        }
    }
}
